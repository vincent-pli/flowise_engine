{
    "nodes": [
        {
            "width": 300,
            "height": 491,
            "id": "conversationalRetrievalQAChain_0",
            "position": {
                "x": 1838.0117150811811,
                "y": 230.65007489387403
            },
            "type": "customNode",
            "data": {
                "id": "conversationalRetrievalQAChain_0",
                "label": "Conversational Retrieval QA Chain",
                "version": 1,
                "name": "conversationalRetrievalQAChain",
                "type": "ConversationalRetrievalQAChain",
                "baseClasses": [
                    "ConversationalRetrievalQAChain",
                    "BaseChain",
                    "Runnable"
                ],
                "category": "Chains",
                "description": "Document QA - built on RetrievalQAChain to provide a chat history component",
                "inputParams": [
                    {
                        "label": "Return Source Documents",
                        "name": "returnSourceDocuments",
                        "type": "boolean",
                        "optional": true,
                        "id": "conversationalRetrievalQAChain_0-input-returnSourceDocuments-boolean"
                    },
                    {
                        "label": "System Message",
                        "name": "systemMessagePrompt",
                        "type": "string",
                        "rows": 4,
                        "additionalParams": true,
                        "optional": true,
                        "placeholder": "I want you to act as a document that I am having a conversation with. Your name is \"AI Assistant\". You will provide me with answers from the given info. If the answer is not included, say exactly \"Hmm, I am not sure.\" and stop after that. Refuse to answer any question not about the info. Never break character.",
                        "id": "conversationalRetrievalQAChain_0-input-systemMessagePrompt-string"
                    },
                    {
                        "label": "Chain Option",
                        "name": "chainOption",
                        "type": "options",
                        "options": [
                            {
                                "label": "MapReduceDocumentsChain",
                                "name": "map_reduce",
                                "description": "Suitable for QA tasks over larger documents and can run the preprocessing step in parallel, reducing the running time"
                            },
                            {
                                "label": "RefineDocumentsChain",
                                "name": "refine",
                                "description": "Suitable for QA tasks over a large number of documents."
                            },
                            {
                                "label": "StuffDocumentsChain",
                                "name": "stuff",
                                "description": "Suitable for QA tasks over a small number of documents."
                            }
                        ],
                        "additionalParams": true,
                        "optional": true,
                        "id": "conversationalRetrievalQAChain_0-input-chainOption-options"
                    }
                ],
                "inputAnchors": [
                    {
                        "label": "Language Model",
                        "name": "model",
                        "type": "BaseLanguageModel",
                        "id": "conversationalRetrievalQAChain_0-input-model-BaseLanguageModel"
                    },
                    {
                        "label": "Vector Store Retriever",
                        "name": "vectorStoreRetriever",
                        "type": "BaseRetriever",
                        "id": "conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever"
                    },
                    {
                        "label": "Memory",
                        "name": "memory",
                        "type": "BaseMemory",
                        "optional": true,
                        "description": "If left empty, a default BufferMemory will be used",
                        "id": "conversationalRetrievalQAChain_0-input-memory-BaseMemory"
                    }
                ],
                "inputs": {
                    "model": "{{openAI_0.data.instance}}",
                    "vectorStoreRetriever": "{{memoryVectorStore_0.data.instance}}",
                    "memory": "{{bufferMemory_0.data.instance}}",
                    "returnSourceDocuments": true,
                    "systemMessagePrompt": "",
                    "chainOption": ""
                },
                "outputAnchors": [
                    {
                        "id": "conversationalRetrievalQAChain_0-output-conversationalRetrievalQAChain-ConversationalRetrievalQAChain|BaseChain|Runnable",
                        "name": "conversationalRetrievalQAChain",
                        "label": "ConversationalRetrievalQAChain",
                        "type": "ConversationalRetrievalQAChain | BaseChain | Runnable"
                    }
                ],
                "outputs": {},
                "selected": false,
                "credentialRecord": {}
            },
            "selected": false,
            "positionAbsolute": {
                "x": 1838.0117150811811,
                "y": 230.65007489387403
            },
            "dragging": false
        },
        {
            "width": 300,
            "height": 413,
            "id": "docxFile_0",
            "position": {
                "x": 708.1062693642621,
                "y": -51.04616127351936
            },
            "type": "customNode",
            "data": {
                "id": "docxFile_0",
                "label": "Docx File",
                "version": 1,
                "name": "docxFile",
                "type": "Document",
                "baseClasses": [
                    "Document"
                ],
                "category": "Document Loaders",
                "description": "Load data from DOCX files",
                "inputParams": [
                    {
                        "label": "Docx File",
                        "name": "docxFile",
                        "type": "file",
                        "fileType": ".docx",
                        "id": "docxFile_0-input-docxFile-file"
                    },
                    {
                        "label": "Metadata",
                        "name": "metadata",
                        "type": "json",
                        "optional": true,
                        "additionalParams": true,
                        "id": "docxFile_0-input-metadata-json"
                    }
                ],
                "inputAnchors": [
                    {
                        "label": "Text Splitter",
                        "name": "textSplitter",
                        "type": "TextSplitter",
                        "optional": true,
                        "id": "docxFile_0-input-textSplitter-TextSplitter"
                    }
                ],
                "inputs": {
                    "textSplitter": "{{characterTextSplitter_0.data.instance}}",
                    "metadata": "",
                    "docxFile": "data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,,filename:Pengli-CV.docx"
                },
                "outputAnchors": [
                    {
                        "id": "docxFile_0-output-docxFile-Document",
                        "name": "docxFile",
                        "label": "Document",
                        "type": "Document"
                    }
                ],
                "outputs": {},
                "selected": false,
                "credentialRecord": {}
            },
            "selected": false,
            "positionAbsolute": {
                "x": 708.1062693642621,
                "y": -51.04616127351936
            },
            "dragging": false
        },
        {
            "width": 300,
            "height": 476,
            "id": "characterTextSplitter_0",
            "position": {
                "x": 308.30200114818933,
                "y": 177.820179638497
            },
            "type": "customNode",
            "data": {
                "id": "characterTextSplitter_0",
                "label": "Character Text Splitter",
                "version": 1,
                "name": "characterTextSplitter",
                "type": "CharacterTextSplitter",
                "baseClasses": [
                    "CharacterTextSplitter",
                    "TextSplitter",
                    "BaseDocumentTransformer",
                    "Runnable"
                ],
                "category": "Text Splitters",
                "description": "splits only on one type of character (defaults to \"\\n\\n\").",
                "inputParams": [
                    {
                        "label": "Separator",
                        "name": "separator",
                        "type": "string",
                        "optional": true,
                        "id": "characterTextSplitter_0-input-separator-string"
                    },
                    {
                        "label": "Chunk Size",
                        "name": "chunkSize",
                        "type": "number",
                        "default": 1000,
                        "optional": true,
                        "id": "characterTextSplitter_0-input-chunkSize-number"
                    },
                    {
                        "label": "Chunk Overlap",
                        "name": "chunkOverlap",
                        "type": "number",
                        "optional": true,
                        "id": "characterTextSplitter_0-input-chunkOverlap-number"
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "separator": "\\n",
                    "chunkSize": "100",
                    "chunkOverlap": "10"
                },
                "outputAnchors": [
                    {
                        "id": "characterTextSplitter_0-output-characterTextSplitter-CharacterTextSplitter|TextSplitter|BaseDocumentTransformer|Runnable",
                        "name": "characterTextSplitter",
                        "label": "CharacterTextSplitter",
                        "type": "CharacterTextSplitter | TextSplitter | BaseDocumentTransformer | Runnable"
                    }
                ],
                "outputs": {},
                "selected": false,
                "credentialRecord": {}
            },
            "selected": false,
            "positionAbsolute": {
                "x": 308.30200114818933,
                "y": 177.820179638497
            },
            "dragging": false
        },
        {
            "width": 300,
            "height": 407,
            "id": "memoryVectorStore_0",
            "position": {
                "x": 1108.0921132486824,
                "y": 143.01487145352087
            },
            "type": "customNode",
            "data": {
                "id": "memoryVectorStore_0",
                "label": "In-Memory Vector Store",
                "version": 1,
                "name": "memoryVectorStore",
                "type": "Memory",
                "baseClasses": [
                    "Memory",
                    "VectorStoreRetriever",
                    "BaseRetriever"
                ],
                "category": "Vector Stores",
                "description": "In-memory vectorstore that stores embeddings and does an exact, linear search for the most similar embeddings.",
                "inputParams": [
                    {
                        "label": "Top K",
                        "name": "topK",
                        "description": "Number of top results to fetch. Default to 4",
                        "placeholder": "4",
                        "type": "number",
                        "optional": true,
                        "id": "memoryVectorStore_0-input-topK-number"
                    }
                ],
                "inputAnchors": [
                    {
                        "label": "Document",
                        "name": "document",
                        "type": "Document",
                        "list": true,
                        "id": "memoryVectorStore_0-input-document-Document"
                    },
                    {
                        "label": "Embeddings",
                        "name": "embeddings",
                        "type": "Embeddings",
                        "id": "memoryVectorStore_0-input-embeddings-Embeddings"
                    }
                ],
                "inputs": {
                    "document": [
                        "{{docxFile_0.data.instance}}"
                    ],
                    "embeddings": "{{openAIEmbeddings_0.data.instance}}",
                    "topK": ""
                },
                "outputAnchors": [
                    {
                        "name": "output",
                        "label": "Output",
                        "type": "options",
                        "options": [
                            {
                                "id": "memoryVectorStore_0-output-retriever-Memory|VectorStoreRetriever|BaseRetriever",
                                "name": "retriever",
                                "label": "Memory Retriever",
                                "type": "Memory | VectorStoreRetriever | BaseRetriever"
                            },
                            {
                                "id": "memoryVectorStore_0-output-vectorStore-Memory|VectorStore",
                                "name": "vectorStore",
                                "label": "Memory Vector Store",
                                "type": "Memory | VectorStore"
                            }
                        ],
                        "default": "retriever"
                    }
                ],
                "outputs": {
                    "output": "retriever"
                },
                "selected": false,
                "credentialRecord": {}
            },
            "selected": false,
            "positionAbsolute": {
                "x": 1108.0921132486824,
                "y": 143.01487145352087
            },
            "dragging": false
        },
        {
            "width": 300,
            "height": 378,
            "id": "bufferMemory_0",
            "position": {
                "x": 1463.9635289832204,
                "y": 595.8977323552876
            },
            "type": "customNode",
            "data": {
                "id": "bufferMemory_0",
                "label": "Buffer Memory",
                "version": 1,
                "name": "bufferMemory",
                "type": "BufferMemory",
                "baseClasses": [
                    "BufferMemory",
                    "BaseChatMemory",
                    "BaseMemory"
                ],
                "category": "Memory",
                "description": "Remembers previous conversational back and forths directly",
                "inputParams": [
                    {
                        "label": "Memory Key",
                        "name": "memoryKey",
                        "type": "string",
                        "default": "chat_history",
                        "id": "bufferMemory_0-input-memoryKey-string"
                    },
                    {
                        "label": "Input Key",
                        "name": "inputKey",
                        "type": "string",
                        "default": "input",
                        "id": "bufferMemory_0-input-inputKey-string"
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "memoryKey": "chat_history",
                    "inputKey": "input"
                },
                "outputAnchors": [
                    {
                        "id": "bufferMemory_0-output-bufferMemory-BufferMemory|BaseChatMemory|BaseMemory",
                        "name": "bufferMemory",
                        "label": "BufferMemory",
                        "type": "BufferMemory | BaseChatMemory | BaseMemory"
                    }
                ],
                "outputs": {},
                "selected": false,
                "credentialRecord": {}
            },
            "selected": false,
            "positionAbsolute": {
                "x": 1463.9635289832204,
                "y": 595.8977323552876
            },
            "dragging": false
        },
        {
            "width": 300,
            "height": 576,
            "id": "openAI_0",
            "position": {
                "x": 1488.171752623841,
                "y": -245.27030761321723
            },
            "type": "customNode",
            "data": {
                "id": "openAI_0",
                "label": "OpenAI",
                "version": 3,
                "name": "openAI",
                "type": "OpenAI",
                "baseClasses": [
                    "OpenAI",
                    "BaseLLM",
                    "BaseLanguageModel",
                    "Runnable"
                ],
                "category": "LLMs",
                "description": "Wrapper around OpenAI large language models",
                "inputParams": [
                    {
                        "label": "Connect Credential",
                        "name": "credential",
                        "type": "credential",
                        "credentialNames": [
                            "openAIApi"
                        ],
                        "id": "openAI_0-input-credential-credential"
                    },
                    {
                        "label": "Model Name",
                        "name": "modelName",
                        "type": "options",
                        "options": [
                            {
                                "label": "gpt-3.5-turbo-instruct",
                                "name": "gpt-3.5-turbo-instruct"
                            },
                            {
                                "label": "babbage-002",
                                "name": "babbage-002"
                            },
                            {
                                "label": "davinci-002",
                                "name": "davinci-002"
                            }
                        ],
                        "default": "gpt-3.5-turbo-instruct",
                        "optional": true,
                        "id": "openAI_0-input-modelName-options"
                    },
                    {
                        "label": "Temperature",
                        "name": "temperature",
                        "type": "number",
                        "step": 0.1,
                        "default": 0.7,
                        "optional": true,
                        "id": "openAI_0-input-temperature-number"
                    },
                    {
                        "label": "Max Tokens",
                        "name": "maxTokens",
                        "type": "number",
                        "step": 1,
                        "optional": true,
                        "additionalParams": true,
                        "id": "openAI_0-input-maxTokens-number"
                    },
                    {
                        "label": "Top Probability",
                        "name": "topP",
                        "type": "number",
                        "step": 0.1,
                        "optional": true,
                        "additionalParams": true,
                        "id": "openAI_0-input-topP-number"
                    },
                    {
                        "label": "Best Of",
                        "name": "bestOf",
                        "type": "number",
                        "step": 1,
                        "optional": true,
                        "additionalParams": true,
                        "id": "openAI_0-input-bestOf-number"
                    },
                    {
                        "label": "Frequency Penalty",
                        "name": "frequencyPenalty",
                        "type": "number",
                        "step": 0.1,
                        "optional": true,
                        "additionalParams": true,
                        "id": "openAI_0-input-frequencyPenalty-number"
                    },
                    {
                        "label": "Presence Penalty",
                        "name": "presencePenalty",
                        "type": "number",
                        "step": 0.1,
                        "optional": true,
                        "additionalParams": true,
                        "id": "openAI_0-input-presencePenalty-number"
                    },
                    {
                        "label": "Batch Size",
                        "name": "batchSize",
                        "type": "number",
                        "step": 1,
                        "optional": true,
                        "additionalParams": true,
                        "id": "openAI_0-input-batchSize-number"
                    },
                    {
                        "label": "Timeout",
                        "name": "timeout",
                        "type": "number",
                        "step": 1,
                        "optional": true,
                        "additionalParams": true,
                        "id": "openAI_0-input-timeout-number"
                    },
                    {
                        "label": "BasePath",
                        "name": "basepath",
                        "type": "string",
                        "optional": true,
                        "additionalParams": true,
                        "id": "openAI_0-input-basepath-string"
                    },
                    {
                        "label": "BaseOptions",
                        "name": "baseOptions",
                        "type": "json",
                        "optional": true,
                        "additionalParams": true,
                        "id": "openAI_0-input-baseOptions-json"
                    }
                ],
                "inputAnchors": [
                    {
                        "label": "Cache",
                        "name": "cache",
                        "type": "BaseCache",
                        "optional": true,
                        "id": "openAI_0-input-cache-BaseCache"
                    }
                ],
                "inputs": {
                    "cache": "",
                    "modelName": "gpt-3.5-turbo-instruct",
                    "temperature": 0.7,
                    "maxTokens": "",
                    "topP": "",
                    "bestOf": "",
                    "frequencyPenalty": "",
                    "presencePenalty": "",
                    "batchSize": "",
                    "timeout": "",
                    "basepath": "",
                    "baseOptions": ""
                },
                "outputAnchors": [
                    {
                        "id": "openAI_0-output-openAI-OpenAI|BaseLLM|BaseLanguageModel|Runnable",
                        "name": "openAI",
                        "label": "OpenAI",
                        "type": "OpenAI | BaseLLM | BaseLanguageModel | Runnable"
                    }
                ],
                "outputs": {},
                "selected": false,
                "credential": "5de1229a-fcf9-407d-9346-da1114e4f462",
                "credentialRecord": {}
            },
            "selected": false,
            "dragging": false,
            "positionAbsolute": {
                "x": 1488.171752623841,
                "y": -245.27030761321723
            }
        },
        {
            "width": 300,
            "height": 330,
            "id": "openAIEmbeddings_0",
            "position": {
                "x": 659.1048866931711,
                "y": 669.7473349150166
            },
            "type": "customNode",
            "data": {
                "id": "openAIEmbeddings_0",
                "label": "OpenAI Embeddings",
                "version": 1,
                "name": "openAIEmbeddings",
                "type": "OpenAIEmbeddings",
                "baseClasses": [
                    "OpenAIEmbeddings",
                    "Embeddings"
                ],
                "category": "Embeddings",
                "description": "OpenAI API to generate embeddings for a given text",
                "inputParams": [
                    {
                        "label": "Connect Credential",
                        "name": "credential",
                        "type": "credential",
                        "credentialNames": [
                            "openAIApi"
                        ],
                        "id": "openAIEmbeddings_0-input-credential-credential"
                    },
                    {
                        "label": "Strip New Lines",
                        "name": "stripNewLines",
                        "type": "boolean",
                        "optional": true,
                        "additionalParams": true,
                        "id": "openAIEmbeddings_0-input-stripNewLines-boolean"
                    },
                    {
                        "label": "Batch Size",
                        "name": "batchSize",
                        "type": "number",
                        "optional": true,
                        "additionalParams": true,
                        "id": "openAIEmbeddings_0-input-batchSize-number"
                    },
                    {
                        "label": "Timeout",
                        "name": "timeout",
                        "type": "number",
                        "optional": true,
                        "additionalParams": true,
                        "id": "openAIEmbeddings_0-input-timeout-number"
                    },
                    {
                        "label": "BasePath",
                        "name": "basepath",
                        "type": "string",
                        "optional": true,
                        "additionalParams": true,
                        "id": "openAIEmbeddings_0-input-basepath-string"
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "stripNewLines": "",
                    "batchSize": "",
                    "timeout": "",
                    "basepath": ""
                },
                "outputAnchors": [
                    {
                        "id": "openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings",
                        "name": "openAIEmbeddings",
                        "label": "OpenAIEmbeddings",
                        "type": "OpenAIEmbeddings | Embeddings"
                    }
                ],
                "outputs": {},
                "selected": false,
                "credential": "5de1229a-fcf9-407d-9346-da1114e4f462",
                "credentialRecord": {}
            },
            "selected": false,
            "positionAbsolute": {
                "x": 659.1048866931711,
                "y": 669.7473349150166
            },
            "dragging": false
        }
    ],
    "edges": [
        {
            "source": "characterTextSplitter_0",
            "sourceHandle": "characterTextSplitter_0-output-characterTextSplitter-CharacterTextSplitter|TextSplitter|BaseDocumentTransformer|Runnable",
            "target": "docxFile_0",
            "targetHandle": "docxFile_0-input-textSplitter-TextSplitter",
            "type": "buttonedge",
            "id": "characterTextSplitter_0-characterTextSplitter_0-output-characterTextSplitter-CharacterTextSplitter|TextSplitter|BaseDocumentTransformer|Runnable-docxFile_0-docxFile_0-input-textSplitter-TextSplitter",
            "data": {
                "label": ""
            }
        },
        {
            "source": "docxFile_0",
            "sourceHandle": "docxFile_0-output-docxFile-Document",
            "target": "memoryVectorStore_0",
            "targetHandle": "memoryVectorStore_0-input-document-Document",
            "type": "buttonedge",
            "id": "docxFile_0-docxFile_0-output-docxFile-Document-memoryVectorStore_0-memoryVectorStore_0-input-document-Document",
            "data": {
                "label": ""
            }
        },
        {
            "source": "memoryVectorStore_0",
            "sourceHandle": "memoryVectorStore_0-output-retriever-Memory|VectorStoreRetriever|BaseRetriever",
            "target": "conversationalRetrievalQAChain_0",
            "targetHandle": "conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever",
            "type": "buttonedge",
            "id": "memoryVectorStore_0-memoryVectorStore_0-output-retriever-Memory|VectorStoreRetriever|BaseRetriever-conversationalRetrievalQAChain_0-conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever",
            "data": {
                "label": ""
            }
        },
        {
            "source": "bufferMemory_0",
            "sourceHandle": "bufferMemory_0-output-bufferMemory-BufferMemory|BaseChatMemory|BaseMemory",
            "target": "conversationalRetrievalQAChain_0",
            "targetHandle": "conversationalRetrievalQAChain_0-input-memory-BaseMemory",
            "type": "buttonedge",
            "id": "bufferMemory_0-bufferMemory_0-output-bufferMemory-BufferMemory|BaseChatMemory|BaseMemory-conversationalRetrievalQAChain_0-conversationalRetrievalQAChain_0-input-memory-BaseMemory",
            "data": {
                "label": ""
            }
        },
        {
            "source": "openAI_0",
            "sourceHandle": "openAI_0-output-openAI-OpenAI|BaseLLM|BaseLanguageModel|Runnable",
            "target": "conversationalRetrievalQAChain_0",
            "targetHandle": "conversationalRetrievalQAChain_0-input-model-BaseLanguageModel",
            "type": "buttonedge",
            "id": "openAI_0-openAI_0-output-openAI-OpenAI|BaseLLM|BaseLanguageModel|Runnable-conversationalRetrievalQAChain_0-conversationalRetrievalQAChain_0-input-model-BaseLanguageModel",
            "data": {
                "label": ""
            }
        },
        {
            "source": "openAIEmbeddings_0",
            "sourceHandle": "openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings",
            "target": "memoryVectorStore_0",
            "targetHandle": "memoryVectorStore_0-input-embeddings-Embeddings",
            "type": "buttonedge",
            "id": "openAIEmbeddings_0-openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings-memoryVectorStore_0-memoryVectorStore_0-input-embeddings-Embeddings",
            "data": {
                "label": ""
            }
        }
    ],
    "credentialRecords": [
        {
            "id": "5de1229a-fcf9-407d-9346-da1114e4f462",
            "name": "openai-fake",
            "credentialName": "openAIApi",
            "encryptedData": "U2FsdGVkX19hAndWfDKLdVu9xsdQ+aIpa4uHcjZsWtYRtPGWzZqa+BO5hcGGFbv6Jt38i5M42UIJMZ5osEgx5k5AiDBE4K8vF5PEbHOZuP/enBRt7kSsGxJXqmeBUsGu",
            "owner": "bbf6f034-f11e-4ecd-9e72-c7af33e7279e",
            "createdDate": "2023-11-13T01:29:03.000Z",
            "updatedDate": "2023-11-13T01:29:03.000Z"
        },
        {
            "id": "5de1229a-fcf9-407d-9346-da1114e4f462",
            "name": "openai-fake",
            "credentialName": "openAIApi",
            "encryptedData": "U2FsdGVkX19hAndWfDKLdVu9xsdQ+aIpa4uHcjZsWtYRtPGWzZqa+BO5hcGGFbv6Jt38i5M42UIJMZ5osEgx5k5AiDBE4K8vF5PEbHOZuP/enBRt7kSsGxJXqmeBUsGu",
            "owner": "bbf6f034-f11e-4ecd-9e72-c7af33e7279e",
            "createdDate": "2023-11-13T01:29:03.000Z",
            "updatedDate": "2023-11-13T01:29:03.000Z"
        }
    ]
}